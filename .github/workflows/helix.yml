name: Helix (Debian 11,12)

# Based on https://github.com/helix-editor/helix/blob/master/.github/workflows/release.yml

on:
  workflow_dispatch:

env:
  MAIN_URL: "https://github.com/helix-editor/helix/archive/refs/tags/23.05.tar.gz"
  NAME_SOURCE: "helix-editor.tar.gz"
  WORKDIR: "helix-23.05"
  RELEASE_NAME: "helix"

jobs:
  fetch-grammars:
    name: Fetch Grammars
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout sources
        # uses: actions/checkout@v4
        run: |
          wget "${{ env.MAIN_URL }}" -O "${{ env.NAME_SOURCE }}"
          tar -xvf "${{ env.NAME_SOURCE }}"
          rm -v "${{ env.NAME_SOURCE }}"
          printf "\n\n[FILES]\n"
          find ${{ env.WORKDIR }}

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2

      - name: Fetch tree-sitter grammars
        working-directory: ${{ env.WORKDIR }}
        run: cargo run --package=helix-loader --bin=hx-loader

      - name: Bundle grammars
        working-directory: ${{ env.WORKDIR }}
        run: tar cJf grammars.tar.xz -C runtime/grammars/sources .

      - uses: actions/upload-artifact@v3
        with:
          name: grammars
          path: "${{ env.WORKDIR }}/grammars.tar.xz"

  dist:
    name: Dist
    needs: [fetch-grammars]
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS:
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # don't fail other jobs if one fails
      matrix:
        build: [x86_64-linux] #, x86_64-win-gnu, win32-msvc
        include:
        - build: x86_64-linux
          os: ubuntu-20.04
          rust: stable
          target: x86_64-unknown-linux-gnu
          cross: false
          
    steps:
      - name: Checkout sources
        # uses: actions/checkout@v4
        run: |
          wget "${{ env.MAIN_URL }}" -O "${{ env.NAME_SOURCE }}"
          tar -xvf "${{ env.NAME_SOURCE }}"
          rm -v "${{ env.NAME_SOURCE }}"
          printf "\n\n[FILES]\n"
          find ${{ env.WORKDIR }}

      - name: Download grammars
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.WORKDIR }}

      - name: Move grammars under runtime
        working-directory: ${{ env.WORKDIR }}
        run: |
          mkdir -p runtime/grammars/sources
          tar xJf grammars/grammars.tar.xz -C runtime/grammars/sources

      - name: Remove the rust-toolchain.toml file
        working-directory: ${{ env.WORKDIR }}
        run: rm rust-toolchain.toml

      - name: Install ${{ matrix.rust }} toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}

#      - name: Install Cross
#        working-directory: ${{ env.WORKDIR }}
#        if: "matrix.cross"
#        run: |
#          cargo install cross --git https://github.com/cross-rs/cross.git --rev 47df5c76e7cba682823a0b6aa6d95c17b31ba63a
#          echo "CARGO=cross" >> $GITHUB_ENV

#      - name: Show command used for Cargo
#        run: |
#          echo "cargo command is: ${{ env.CARGO }}"
#          echo "target flag is: ${{ env.TARGET_FLAGS }}"

#      - name: Run cargo test
#        if: "!matrix.skip_tests"
#        run: ${{ env.CARGO }} test --release --locked --target ${{ matrix.target }} --workspace

      - name: Set profile.release.strip = true
        shell: bash
        working-directory: ${{ env.WORKDIR }}
        run: |
          cat >> .cargo/config.toml <<EOF
          [profile.release]
          strip = true
          EOF

      - name: Build release binary
        working-directory: ${{ env.WORKDIR }}
        run: ${{ env.CARGO }} build --release --locked --target ${{ matrix.target }}

      - name: Build archive
        shell: bash
        working-directory: ${{ env.WORKDIR }}
        run: |
          mkdir -p dist
          cp "target/${{ matrix.target }}/release/hx" "dist/"
          if [ -d runtime/grammars/sources ]; then
            rm -rf runtime/grammars/sources
          fi
          cp -r runtime dist
          printf "\n\n[ Contents of 'dist' ]\n"
          find dist

#      - uses: actions/upload-artifact@v3
#        with:
#          name: bins-${{ matrix.build }}
#          path: dist
